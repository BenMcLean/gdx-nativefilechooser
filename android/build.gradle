apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

repositories {
  mavenCentral()
  google()
  jcenter()
  maven { url "https://jitpack.io" }
}

group = 'net.spookygames.gdx.nativefilechooser'
version = '0.0.1'

android {
  compileSdkVersion 28
  buildToolsVersion "28.0.3"

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 28
    versionCode 1
    versionName version
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    abortOnError false
  }
  sourceSets {
    main.java.srcDirs += 'src/main/java'
  }
}
configurations { natives }

dependencies {
  api project(':core')
//  api fileTree(dir: 'libs', include: ['*.jar'])
  
//  api "com.android.support:design:28.0.0"
  api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"

  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
  file("libs/armeabi/").mkdirs()
  file("libs/armeabi-v7a/").mkdirs()
  file("libs/arm64-v8a/").mkdirs()
  file("libs/x86_64/").mkdirs()
  file("libs/x86/").mkdirs()

  configurations.natives.files.each { jar ->
    def outputDir = null
    if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
    if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
    if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
    if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
    if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
    if(outputDir != null) {
      copy {
        from zipTree(jar)
        into outputDir
        include "*.so"
      }
    }
  }
}


task sourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task classesJar(type: Jar) {
  from "$buildDir/intermediates/javac/release/compileReleaseJavaWithJavac/classes"
}

artifacts {
  archives classesJar
  archives javadocJar
  archives sourcesJar
}
